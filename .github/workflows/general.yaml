name: general

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-compile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json
      - name: Install Dependencies
        run: pnpm ci:install
      - name: Build Packages
        run: pnpm build
      - name: Compile Binaries
        run: pnpm compile
      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dpkit/compile/build/*.zip

  test-linux:
    needs: [test-compile]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json
      - name: Install Dependencies
        run: pnpm ci:install
      - name: Build Packages
        run: pnpm build
      - name: Test Packages
        run: pnpm test
        env:
          DPKIT_MYSQL_URL: mysql://test:test@localhost:3306/test
          DPKIT_POSTGRESQL_URL: postgresql://test:test@localhost:5432/test
      - name: Upload Coverage
        uses: codecov/codecov-action@v5
        with:
          slug: datisthq/dpkit
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Download Binaries
        uses: actions/download-artifact@v5
        with:
          name: binaries
          path: dpkit/compile/build
      - name: Test Binaries
        run: unzip -j dpkit/compile/build/*linux*.zip "dp*" && ./dp --version

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306

  test-macos:
    needs: [test-compile]
    runs-on: macos-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json
      - name: Install Dependencies
        run: pnpm ci:install
      - name: Build Packages
        run: pnpm build
      - name: Test Packages
        run: pnpm test
      - name: Download Binaries
        uses: actions/download-artifact@v5
        with:
          name: binaries
          path: dpkit/compile/build
      - name: Test Binaries
        run: unzip -j dpkit/compile/build/*macos*.zip "dp*" && ./dp --version

  test-windows:
    needs: [test-compile]
    runs-on: windows-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json
      - name: Install Dependencies
        run: pnpm ci:install
      - name: Build Packages
        run: pnpm build
      # - name: Test Packages
      # TODO: Linting fails on Windows
      # run: pnpm spec
      - name: Download Binaries
        uses: actions/download-artifact@v5
        with:
          name: binaries
          path: dpkit/compile/build
      - name: Test Binaries
        run: |
          $zipFile = Get-ChildItem dpkit/compile/build/*windows*.zip | Select-Object -First 1
          Expand-Archive -Path $zipFile.FullName -DestinationPath . -Force
          .\dp.exe --version

  # We have to split the release step because for some reason
  # using semantic-release before compilation inflates the binary sizes
  release-draft:
    needs: [test-linux, test-macos, test-windows]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write

    outputs:
      created: ${{ steps.draft.outputs.new_release_published }}
      version: ${{ steps.draft.outputs.new_release_version }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json
      - name: Install Dependencies
        run: pnpm ci:install
      - name: Draft Release
        id: draft
        uses: cycjimmy/semantic-release-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-publish:
    needs: [release-draft]
    if: needs.release-draft.outputs.created == 'true'
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json
      - name: Install Dependencies
        run: pnpm ci:install
      - name: Update Version
        run: pnpm ci:version -- ${{ needs.release-draft.outputs.version }}
      - name: Build Packages
        run: pnpm build
      - name: Compile Packages
        run: pnpm compile
      - name: Publish Packages
        run: pnpm ci:publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          files: dpkit/compile/build/*.zip
          tag_name: v${{ needs.release-draft.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
